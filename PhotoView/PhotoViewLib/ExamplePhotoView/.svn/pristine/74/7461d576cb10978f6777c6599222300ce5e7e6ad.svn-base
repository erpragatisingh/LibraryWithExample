package com.vnpay.vntalk.util;

import java.io.UnsupportedEncodingException;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;

public class Utils_String {
	private static char[] sREPLACEMENTS = { ' ', '!', '"', '#', '$', '%', '*',
			'+', ',', ':', '<', '=', '>', '?', '@', '[', '\\', ']', '^', '`',
			'|', '~', 'A', 'A', 'A', 'A', 'E', 'E', 'E', 'I', 'I', 'O', 'O',
			'O', 'O', 'U', 'U', 'Y', 'a', 'a', 'a', 'a', 'e', 'e', 'e', 'i',
			'i', 'o', 'o', 'o', 'o', 'u', 'u', 'y', 'A', 'a', 'D', 'd', 'I',
			'i', 'U', 'u', 'O', 'o', 'U', 'u', 'A', 'a', 'A', 'a', 'A', 'a',
			'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A',
			'a', 'A', 'a', 'A', 'a', 'E', 'e', 'E', 'e', 'E', 'e', 'E', 'e',
			'E', 'e', 'E', 'e', 'E', 'e', 'E', 'e', 'I', 'i', 'I', 'i', 'O',
			'o', 'O', 'o', 'O', 'o', 'O', 'o', 'O', 'o', 'O', 'o', 'O', 'o',
			'O', 'o', 'O', 'o', 'O', 'o', 'O', 'o', 'O', 'o', 'U', 'u', 'U',
			'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', };

	public static long convertStringToLong1(String data) {
		long time = 0;
		time += Long.parseLong(data.substring(0, data.indexOf(":")));
		time += 60 * 1000 * time;
		time += Long.parseLong(data.substring(data.indexOf(":") + 1)) * 1000;

		return time;
	}

	private static char[] sSPECIAL_CHARACTERS = { ' ', '!', '"', '#', '$', '%',
			'*', '+', ',', ':', '<', '=', '>', '?', '@', '[', '\\', ']', '^',
			'`', '|', '~', 'À', 'Á', 'Â', 'Ã', 'È', 'É', 'Ê', 'Ì', 'Í', 'Ò',
			'Ó', 'Ô', 'Õ', 'Ù', 'Ú', 'Ý', 'à', 'á', 'â', 'ã', 'è', 'é', 'ê',
			'ì', 'í', 'ò', 'ó', 'ô', 'õ', 'ù', 'ú', 'ý', 'Ă', 'ă', 'Đ', 'đ',
			'Ĩ', 'ĩ', 'Ũ', 'ũ', 'Ơ', 'ơ', 'Ư', 'ư', 'Ạ', 'ạ', 'Ả', 'ả', 'Ấ',
			'ấ', 'Ầ', 'ầ', 'Ẩ', 'ẩ', 'Ẫ', 'ẫ', 'Ậ', 'ậ', 'Ắ', 'ắ', 'Ằ', 'ằ',
			'Ẳ', 'ẳ', 'Ẵ', 'ẵ', 'Ặ', 'ặ', 'Ẹ', 'ẹ', 'Ẻ', 'ẻ', 'Ẽ', 'ẽ', 'Ế',
			'ế', 'Ề', 'ề', 'Ể', 'ể', 'Ễ', 'ễ', 'Ệ', 'ệ', 'Ỉ', 'ỉ', 'Ị', 'ị',
			'Ọ', 'ọ', 'Ỏ', 'ỏ', 'Ố', 'ố', 'Ồ', 'ồ', 'Ổ', 'ổ', 'Ỗ', 'ỗ', 'Ộ',
			'ộ', 'Ớ', 'ớ', 'Ờ', 'ờ', 'Ở', 'ở', 'Ỡ', 'ỡ', 'Ợ', 'ợ', 'Ụ', 'ụ',
			'Ủ', 'ủ', 'Ứ', 'ứ', 'Ừ', 'ừ', 'Ử', 'ử', 'Ữ', 'ữ', 'Ự', 'ự', };
	private static char[] sSPECIAL_CHARACTERS1 = { ' ', '!', '"', '#', '$',
			'%', '*', '+', ',', ':', '<', '=', '>', '?', '@', '[', '\\', ']',
			'^', '`', '|', '~', };

	private static final String TAG = Utils_String.class.getSimpleName();

	public static final String WHITESPACE_CHARACTERS = " \t\n\r\f";

	public static String byteArrayToString(byte[] ar) {
		StringBuffer s = new StringBuffer();

		int j = ar.length; // for speed
		for (int i = 0; i < j; i++) {
			String t = Integer.toHexString(ar[i] >= 0 ? ar[i] : ar[i] + 256);
			if (t.length() < 2) {
				t = "0" + t;
			}
			s.append(t);
		}
		return s.toString();
	}

	public static int byteLength(String src) {
		int length = 0;
		if (src != null) {
			length = src.getBytes().length;
		}
		return length;

	}

	public static String changeDateFormat(String dateStr, String inPattern,
			String outPattern) {
		String retVal = null;
		Date date = strToDate(dateStr, inPattern);

		if (date != null) {
			retVal = dateToStr(date, outPattern);
		}

		return retVal;
	}

	public static boolean CheckFullName(String s) {
		boolean check = false;
		Pattern localPattern = Pattern.compile("^[A-Za-z0-9\\s]*$");
		if (!localPattern.matcher(s).matches())
			check = true;
		return check;
	}

	public static int checkLeft(String s, int index) {
		if (s.length() == 0)
			return -1;
		if (index == s.length())
			index--;
		while (index > -1) {
			if (index > 0 && s.charAt(index - 1) == 8)
				return -1;
			if (s.charAt(index) == '@')
				return index;
			index--;
		}
		return -1;
	}

	public static String checkLeftRight(String s, int index) {
		int end = checkRight(s, index);
		if (end > -1) {
			int start = checkLeft(s, index);
			if (start > -1) {
				return s.substring(start, end + 1);
			}
		}
		return "";

	}

	public static int checkRight(String s, int index) {
		if (s.length() == 0 || index < 0)
			return -1;
		if (index == s.length())
			index--;
		while (index < s.length()) {
			if (s.charAt(index) == '@')
				return -1;
			if (s.charAt(index) == 8)
				return index;
			index++;
		}
		return -1;
	}

	public static boolean CheckSpaceCharacter(String s) {
		boolean check = false;
		char[] space = { ' ' };
		int maxLength = Math.min(s.length(), 236);
		for (int i = 0; i < maxLength; i++) {
			char ch = s.charAt(i);
			int index = Arrays.binarySearch(space, ch);
			if (index >= 0) {
				check = true;
			}
		}
		return check;
	}

	public static boolean CheckSpecialCharacter(String s) {
		boolean check = false;
		int maxLength = Math.min(s.length(), 236);
		for (int i = 0; i < maxLength; i++) {
			char ch = s.charAt(i);
			int index = Arrays.binarySearch(sSPECIAL_CHARACTERS1, ch);
			if (index >= 0) {
				check = true;
			}
		}
		return check;
	}

	public static boolean CheckUniCode(String s) {
		boolean check = false;
		Pattern localPattern = Pattern.compile("^[A-Za-z0-9]*$");
		if (!localPattern.matcher(s).matches())
			check = true;
		return check;
	}

	public static String convertIntToString(long time) {
		String resulft = "";
		long s = time / 1000;
		long phut = s / 60;
		long giay = s % 60;
		if (phut < 10)
			resulft = "0" + phut;
		else
			resulft = "" + phut;
		resulft = resulft + ":";
		if (giay < 10)
			resulft = resulft + "0" + giay;
		else
			resulft = resulft + giay;

		return resulft;
	}

	public static long convertStringToLong(String data) {
		long time = 0;
		time += Long.parseLong(data.substring(0, data.indexOf(":")));
		time += 60 * 1000 * time;
		time += Long.parseLong(data.substring(data.indexOf(":") + 1)) * 1000;

		return time;
	}

	public static void copyText(Context _context, String text) {
		int sdk = android.os.Build.VERSION.SDK_INT;
		// if (sdk < android.os.Build.VERSION_CODES.HONEYCOMB) {
		android.text.ClipboardManager clipboard = (android.text.ClipboardManager) _context
				.getSystemService(Context.CLIPBOARD_SERVICE);
		clipboard.setText(text);
	}

	public static String customFormat(String pattern, Double s) {
		DecimalFormatSymbols formatSymbols = new DecimalFormatSymbols(Locale.UK);
		DecimalFormat myFormatter = new DecimalFormat(pattern, formatSymbols);
		String stringformatoutput = myFormatter.format(s);
		return stringformatoutput;
	}

	public static String dateToStr(Date date, String pattern) {
		String retVal = null;

		if (date != null) {
			try {
				SimpleDateFormat formatter = new SimpleDateFormat(pattern,
						Locale.getDefault());
				retVal = formatter.format(date);
			} catch (Exception e) {
			}
		}

		return retVal;
	}

	public static String E2K(String english) {
		String korean = null;

		if (english == null)
			return null;

		try {
			korean = new String(english.getBytes("8859_1"), "euc-kr");
		} catch (UnsupportedEncodingException e) {
			korean = new String(english);
		}
		return korean;
	}

	public static String findMatch(String myString) {
		String match = "";

		// Pattern to find code
		String pattern = "[0-9]{8}"; // Sequence of 8 digits
		Pattern regEx = Pattern.compile(pattern);

		// Find instance of pattern matches
		Matcher m = regEx.matcher(myString);
		if (m.find()) {
			match = m.group(0);
		}
		return match;
	}

	public static String FormatSize2(long size) {
		String suffix = null;

		if (size >= 1024) {
			suffix = "KB";
			size /= 1024;

			if (size >= 1024) {
				suffix = "MB";
				size /= 1024;
			}
		}

		StringBuilder resultBuffer = new StringBuilder(Long.toString(size));
		return resultBuffer.toString();
	}

	public static String formatString(String s) {
		if (s == null || s.equals("0"))
			return "";
		return s;
	}

	public static String getConvertNull(String sSrc) {
		return getConvertNull(sSrc, "");
	}

	public static String getConvertNull(String sSrc, String sIfNulltoReplace) {
		if (sSrc == null || sSrc.equals(""))
			return sIfNulltoReplace;
		else
			return sSrc.trim();
	}

	public static String getPhoneNumberForm(String _num) {
		if (_num == null || _num.length() <= 0)
			return "";

		int length = _num.length();
		String result = null;

		switch (length) {
		case 10:
			result = _num.substring(0, 3) + "-" + _num.substring(3, 6) + "-"
					+ _num.substring(6, length);
			break;
		default:
			result = _num.substring(0, 3) + "-" + _num.substring(3, 7) + "-"
					+ _num.substring(7, length);
			break;
		}
		return result;
	}

	public static String getTextByKey(String s, String key) {
		int index = s.indexOf(key);
		if (index > -1) {
			index = index + key.length();
			int curIndex = index;
			while (curIndex < s.length()) {
				if (s.charAt(curIndex) == 9) {
					return s.substring(index, curIndex);
				}
				curIndex++;
			}
		}
		return "";
	}

	public static boolean isBlank(final String str) {
		return str == null || str.trim().length() == 0;
	}

	public static boolean isBlank(final String[] str) {
		if (str == null || str.length == 0) {
			return true;
		}
		for (final String s : str) {
			if (!isBlank(s)) {
				return false;
			}
		}
		return true;
	}

	public static boolean isEmail(String sEmail) {
		if (sEmail != null
				&& sEmail.length() <= 50
				&& Pattern.matches(
						"\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.[a-zA-Z]{2,4}$",
						sEmail)) {
			return true;
		}

		return false;
	}

	public static boolean isIntentAvailable(final Context context,
			final Intent intent) {
		final PackageManager packageManager = context.getPackageManager();
		List<ResolveInfo> list = packageManager.queryIntentActivities(intent,
				PackageManager.MATCH_DEFAULT_ONLY);
		return list.size() > 0;
	}

	public static boolean isMobile(String sMobile, String sDelimiter) {
		return Pattern.matches("(01[016789])" + sDelimiter
				+ "[1-9]{1}[0-9]{2,3}" + sDelimiter + "[0-9]{4}$", sMobile);
	}

	public static boolean isNullOrEmpty(String string) {
		if (string == null || string.length() == 0 || string.equals("null")) {
			return true;
		} else {
			return false;
		}
	}

	public static boolean compareTwoString(String s1, String s2) {
		if (s1 == null) {
			if (s2 == null) {
				return true;
			} else {
				return false;
			}
		} else {
			if (s2 == null) {
				return false;
			} else {
				return s1.equals(s2);
			}

		}
	}

	public static boolean isNumeric(String str) {
		try {
			double d = Double.parseDouble(str);
		} catch (NumberFormatException nfe) {
			return false;
		}
		return true;
	}

	public static boolean isPhone(String sPhone, String sDelimiter) {
		return Pattern.matches("(070|02|0[3-9]{1}[0-9]{1})" + sDelimiter
				+ "[1-9]{1}[0-9]{1,3}" + sDelimiter + "[0-9]{4}$", sPhone);
	}

	public static String K2E(String korean) {
		String english = null;

		if (korean == null) {
			return null;
		}

		english = new String(korean);
		try {
			english = new String(korean.getBytes("UTF-8"), "8859_1");
		} catch (UnsupportedEncodingException e) {
			english = new String(korean);
		}
		return english;
	}

	public static String numToStr(int nNum) {

		return numToStr((long) nNum);
	}

	public static String numToStr(long nNum) {
		DecimalFormat decimalFormat = new DecimalFormat("#,###");
		return decimalFormat.format(nNum).toString();
	}

	public static String numToStr(String sNum) {
		return numToStr(Long.parseLong(sNum));
	}

	public static String padLeft(String target, int size) {
		return padValue(target, " ", size, true);
	}

	public static String padLeft(String target, String dest, int size) {
		return padValue(target, dest, size, true);
	}

	public static String padRight(String target, int size) {
		return padValue(target, " ", size, false);
	}

	public static String padRight(String target, String dest, int size) {
		return padValue(target, dest, size, false);
	}

	public static String padValue(String target, String dest, int size,
			boolean left) {
		if (target == null) {
			return target;
		}

		String retVal = null;
		StringBuffer sb = new StringBuffer();

		int length = target.length();
		int diffLength = size - length;

		for (int i = 0; i < diffLength; i++) {
			sb.append(dest);
		}

		if (left == true) {
			retVal = sb.toString() + target;
		} else {
			retVal = target + sb.toString();
		}

		return retVal;
	}

	public static String parsePhoneNumber(String _num) {
		if (_num == null || _num.length() <= 0)
			return null;
		char mChar = _num.charAt(0);
		if (mChar == '+') {
			_num = _num.substring(3, _num.length());
			_num = "0" + _num;
		}
		return _num;
	}

	public static String removeWhitespaces(final String string) {
		final StringBuilder result = new StringBuilder(string.length());
		for (int i = 0; i < string.length(); i++) {
			final char c = string.charAt(i);
			if (!Character.isWhitespace(c)) {
				result.append(c);
			}
		}
		return result.toString();
	}

	public static String replace(String str, String oldStr, String newStr) {
		StringBuffer result = null;
		if (str != null) {
			result = new StringBuffer(str.length());
			int index1 = 0, index2 = 0;

			while ((index2 = str.indexOf(oldStr, index1)) >= 0) {
				result.append(str.substring(index1, index2));
				result.append(newStr);
				index1 = index2 + oldStr.length();
			}
			result.append(str.substring(index1));
		} else {
			result = new StringBuffer("");
		}

		return result.toString();
	}

	public static String replaceCharAt(String s, int pos, String c) {
		return s.substring(0, pos) + c + s.substring(pos + 1);
	}

	public static Date strToDate(String dateStr, String pattern) {
		SimpleDateFormat formatter = new SimpleDateFormat(pattern,
				Locale.getDefault());
		Date date = null;

		try {
			date = formatter.parse(dateStr);
		} catch (Exception e) {
		}

		return date;
	}

	public static long strToNum(String sNum) throws Exception {
		DecimalFormat decimalFormat = new DecimalFormat("#,###");
		Number num = decimalFormat.parse(sNum);
		return num.longValue();
	}

	public static String toUrlFriendly(String s) {
		int maxLength = Math.min(s.length(), 8 * 1024);
		char[] buffer = new char[maxLength];
		int n = 0;
		for (int i = 0; i < maxLength; i++) {
			char ch = s.charAt(i);
			int index = Arrays.binarySearch(sSPECIAL_CHARACTERS, ch);
			if (index >= 0) {
				buffer[n] = sREPLACEMENTS[index];
			} else {
				buffer[n] = ch;
			}
			if (buffer[n] > 31) {
				n++;
			}
		}
		while (n > 0 && buffer[n - 1] == '/') {
			n--;
		}
		return String.valueOf(buffer, 0, n);
	}
}
