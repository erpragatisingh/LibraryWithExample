package com.vnpay.vntalk.util;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;

import org.apache.log4j.Logger;

import android.app.Activity;
import android.content.ContentResolver;
import android.content.Context;
import android.content.res.AssetManager;
import android.content.res.Resources;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.Bitmap.Config;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.PorterDuff.Mode;
import android.graphics.PorterDuffXfermode;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.media.ExifInterface;
import android.net.Uri;
import android.provider.MediaStore;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;

public class Utils_Image {

	static Logger logger = Logger.getLogger(Utils_Image.class);
	
	public static Bitmap genBitmapBackground(Context context, int screenWidth,
			int screenHeight, String nameFile) {
		try {
			Bitmap output = Bitmap.createBitmap(screenWidth, screenHeight,
					Bitmap.Config.ARGB_8888);
			Canvas canvas = new Canvas(output);
			Bitmap unit = null;

			unit = getBitmapFromAsset(context, "bg/" + nameFile);

			final Paint paint = new Paint();
			final Rect rect = new Rect(0, 0, unit.getWidth(), unit.getHeight());

			int colum = screenWidth / unit.getWidth();
			if (screenWidth % unit.getWidth() > 0)
				colum += 1;
			int row = screenHeight / unit.getHeight();
			if (screenHeight % unit.getHeight() > 0)
				row += 1;
			for (int i = 0; i <= row; i++) {
				for (int j = 0; j < colum; j++) {
					final Rect rectds = new Rect(j * unit.getWidth(), i
							* unit.getHeight(), (j + 1) * unit.getWidth(),
							(i + 1) * unit.getHeight());
					canvas.drawBitmap(unit, rect, rectds, paint);
				}
			}
			return output;
		} catch (Exception ex) {

			return null;
		}
	}

	public static Bitmap getRoundedCornerBitmap(Bitmap bitmap, int pixels) {
		Bitmap output = Bitmap.createBitmap(bitmap.getWidth(),
				bitmap.getHeight(), Config.ARGB_8888);
		Canvas canvas = new Canvas(output);

		final int color = 0xff424242;
		final Paint paint = new Paint();
		final Rect rect = new Rect(0, 0, bitmap.getWidth(), bitmap.getHeight());
		final RectF rectF = new RectF(rect);
		final float roundPx = pixels;

		paint.setAntiAlias(true);
		canvas.drawARGB(0, 0, 0, 0);
		paint.setColor(color);
		canvas.drawRoundRect(rectF, roundPx, roundPx, paint);

		paint.setXfermode(new PorterDuffXfermode(Mode.SRC_IN));
		canvas.drawBitmap(bitmap, rect, rect, paint);

		return output;
	}

	public static byte[] bitmap2byte(Bitmap oriBitmap) {
		ByteArrayOutputStream stream = new ByteArrayOutputStream();
		oriBitmap.compress(CompressFormat.JPEG, 100, stream);
		return stream.toByteArray();
	}

	public static Bitmap byte2bitmap(byte[] oriByte, Context context) {
		BitmapFactory.Options options = new BitmapFactory.Options();
		options.inJustDecodeBounds = true;
		BitmapFactory.decodeByteArray(oriByte, 0, oriByte.length, options);

		options.inSampleSize = calculateInSampleSize(options,
				Utils.getScreenWidth(context), Utils.getScreenHeight(context));
		options.inJustDecodeBounds = false;
		Bitmap mBitmap = BitmapFactory.decodeByteArray(oriByte, 0,
				oriByte.length, options);

		return mBitmap;
	}

	public static int calculateInSampleSize(BitmapFactory.Options options,
			int reqWidth, int reqHeight) {
		// Raw height and width of image
		final int height = options.outHeight;
		final int width = options.outWidth;
		int inSampleSize = 1;

		if (height > reqHeight || width > reqWidth) {

			// Calculate ratios of height and width to requested height and
			// width
			final int heightRatio = Math.round((float) height
					/ (float) reqHeight);
			final int widthRatio = Math.round((float) width / (float) reqWidth);

			// Choose the smallest ratio as inSampleSize value, this will
			// guarantee
			// a final image with both dimensions larger than or equal to the
			// requested height and width.
			inSampleSize = heightRatio < widthRatio ? heightRatio : widthRatio;
		}

		return inSampleSize;
	}

	public static Bitmap convertBitmapFromUri(Context context, Uri uri) {
		try {
			InputStream input;
			input = context.getContentResolver().openInputStream(uri);
			Options opt = new Options();

			opt.inJustDecodeBounds = true;
			BitmapFactory.decodeStream(input, null, opt);
			input.close();

			int width_tmp = opt.outWidth, height_tmp = opt.outHeight;

			int minWScreen = Utils.getScreenWidth(context);
			int minHScreen = Utils.getScreenHeight(context);
			int REQUIRED_SIZE = 120;
			float scaleW = (float) width_tmp / minWScreen;

			float scaleH = (float) height_tmp / minHScreen;
			int scale = 1;
			scale = (int) Math.max(scaleW, scaleH);

			if (scale == 0)
				scale = 1;
			int max = Math.max(minWScreen, minHScreen);
			if (max > 720)
				REQUIRED_SIZE = 960;
			else {
				REQUIRED_SIZE = 720;
			}

			BitmapFactory.Options o2 = new BitmapFactory.Options();
			o2.inSampleSize = scale;
			o2.inPreferredConfig = Bitmap.Config.ARGB_8888;
			input = context.getContentResolver().openInputStream(uri);
			Bitmap oriBitmap = BitmapFactory.decodeStream(input, null, o2);

			oriBitmap = Utils_Image.getBitmapBySize(logger, context, oriBitmap,
					REQUIRED_SIZE);
			input.close();
			return oriBitmap;
		} catch (Exception e) {
			uri = null;
			logger.error(e.getMessage(), e);
			return null;
		}
	}

	public static Bitmap convertBitmapPath(Context context, String f) {
		try {
			BitmapFactory.Options o = new BitmapFactory.Options();
			o.inJustDecodeBounds = true;
			BitmapFactory.decodeStream(new FileInputStream(f), null, o);
			// Find the correct scale value. It should be the power of 2.
			int minWScreen = Utils.getScreenWidth(context);
			int minHScreen = Utils.getScreenHeight(context);
			int REQUIRED_SIZE = 120;
			int height_tmp = o.outWidth, width_tmp = o.outHeight;
			final int maxWScreen = width_tmp;
			final int maxHScreen = height_tmp;

			double scaleW = (double) maxWScreen / (double) minWScreen;

			double scaleH = (double) maxHScreen / (double) minHScreen;
			double scale = 1;
			// scale = (scaleW + scaleH) / 2;

			scale = Math.max(scaleW, scaleH);

			if (scale == 0)
				scale = 1;

			int max = Math.max(minWScreen, minHScreen);
			if (max > 720)
				REQUIRED_SIZE = 960;
			else {
				REQUIRED_SIZE = 720;
			}
			BitmapFactory.Options o2 = new BitmapFactory.Options();
			o2.inSampleSize = (int) scale;
			o2.inPreferredConfig = Bitmap.Config.ARGB_8888;
			Bitmap oriBitmap = BitmapFactory.decodeStream(
					new FileInputStream(f), null, o2);

			oriBitmap = Utils_Image.getBitmapBySize(logger, context, oriBitmap,
					REQUIRED_SIZE);

			return oriBitmap;
		} catch (FileNotFoundException e) {
			logger.error(e.getMessage(), e);
		}
		return null;
	}

	// public static Bitmap getRoundBitmapBySizeByColor(Logger logger,
	// Context context, Bitmap oriBitmap, int maxSize) {
	// try {
	//
	// int _sWidth = 0, _sHeight = 0;
	// int width = oriBitmap.getWidth();
	// int height = oriBitmap.getHeight();
	// _sWidth = width;
	// _sHeight = height;
	// if (width > height) {
	// height = maxSize;
	// width = (height * _sWidth) / _sHeight;
	//
	// } else {
	// width = maxSize;
	//
	// height = (width * _sHeight) / _sWidth;
	//
	// }
	// int roundPx = maxSize / 2;
	// int roundPy = maxSize / 2;
	//
	// oriBitmap = Bitmap.createScaledBitmap(oriBitmap, width, height,
	// true);
	// Bitmap output = Bitmap.createBitmap(maxSize + 5, maxSize + 5,
	// Config.ARGB_8888);
	//
	// Canvas canvas = new Canvas(output);
	// final int color = 0xffffffff;
	// final Paint paint = new Paint();
	// final Rect rect = new Rect(0, 0, maxSize, maxSize);
	// final RectF rectF = new RectF(rect);
	// paint.setAntiAlias(true);
	// canvas.drawARGB(0, 0, 0, 0);
	// paint.setColor(color);
	// canvas.drawRoundRect(rectF, roundPx, roundPy, paint);
	// paint.setXfermode(new PorterDuffXfermode(Mode.SRC_IN));
	// canvas.drawBitmap(oriBitmap, rect, rect, paint);
	//
	// return output;
	//
	// } catch (Exception ex) {
	// logger.error(ex.getMessage(), ex);
	// logger.info("getRoundBitmap:" + ex.toString());
	// return null;
	// }
	// }

	private static Bitmap decodeFile(File f) {
		try {
			// decode image size
			BitmapFactory.Options o = new BitmapFactory.Options();
			o.inJustDecodeBounds = true;
			FileInputStream stream1 = new FileInputStream(f);
			BitmapFactory.decodeStream(stream1, null, o);
			stream1.close();

			// Find the correct scale value. It should be the power of 2.
			final int REQUIRED_SIZE = 70;
			int width_tmp = o.outWidth, height_tmp = o.outHeight;
			int scale = 1;

			// decode with inSampleSize
			BitmapFactory.Options o2 = new BitmapFactory.Options();
			o2.inSampleSize = scale;
			FileInputStream stream2 = new FileInputStream(f);
			Bitmap bitmap = BitmapFactory.decodeStream(stream2, null, o2);
			stream2.close();
			return bitmap;
		} catch (FileNotFoundException e) {
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}

	public static Bitmap decodeSampledBitmapFromResource(Resources res,
			int resId, int reqWidth, int reqHeight) {

		// First decode with inJustDecodeBounds=true to check dimensions
		final BitmapFactory.Options options = new BitmapFactory.Options();
		options.inJustDecodeBounds = true;
		BitmapFactory.decodeResource(res, resId, options);

		// Calculate inSampleSize
		options.inSampleSize = calculateInSampleSize(options, reqWidth,
				reqHeight);

		// Decode bitmap with inSampleSize set
		options.inJustDecodeBounds = false;
		return BitmapFactory.decodeResource(res, resId, options);
	}
	public static Bitmap getBitmapResize(Context context, Bitmap oriBitmap, int width,
			int height) {
		if (oriBitmap == null)
			return oriBitmap;
		try {
			int _sWidth = 0, _sHeight = 0;
			_sWidth = oriBitmap.getWidth();
			_sHeight = oriBitmap.getHeight();
			_sHeight = (width * _sHeight) / _sWidth;
			_sWidth = width;
			oriBitmap = Bitmap.createScaledBitmap(oriBitmap, _sWidth, _sHeight,
					true);

			return oriBitmap;
		} catch (Exception ex) {

			return null;
		}
	}
	public static Bitmap getBitmapBySize(Logger logger, Context context,
			Bitmap oriBitmap, int maxSize) {
		if (oriBitmap == null)
			return oriBitmap;
		try {
			int _sWidth = 0, _sHeight = 0;
			int width = oriBitmap.getWidth();
			int height = oriBitmap.getHeight();
			// int max = Math.max(width, height);

			_sWidth = width;
			_sHeight = height;
			if (width < height) {
				height = maxSize;
				width = (height * _sWidth) / _sHeight;

			} else {
				width = maxSize;

				height = (width * _sHeight) / _sWidth;

			}
			oriBitmap = Bitmap.createScaledBitmap(oriBitmap, width, height,
					true);

			return oriBitmap;
		} catch (Exception ex) {
			logger.error(ex.getMessage(), ex);
			logger.info("getRoundBitmap:" + ex.toString());
			return null;
		}
	}

	public static Bitmap getBitmapFromAsset(Context context, String strName) {
		AssetManager assetManager = context.getAssets();
		InputStream istr;
		Bitmap bitmap = null;
		try {

			istr = assetManager.open(strName + ".png");
			bitmap = BitmapFactory.decodeStream(istr);

		} catch (IOException e) {
			return null;
		}
		return bitmap;
	}

	public static Bitmap getBitmapResource(Context context, String name) {
		int id = context.getResources().getIdentifier(name, "drawable",
				context.getPackageName());
		Resources res = context.getResources();
		BitmapDrawable bd = (BitmapDrawable) res.getDrawable(id);
		return bd.getBitmap();
	}

	public static int getBitmapSize(Bitmap oriBitmap) {
		byte[] data = bitmap2byte(oriBitmap);
		return data.length / 1000;
	}

	public static Bitmap getBitmapUrl(File cacheDir, String url) {
		if (url == null || url.length() == 0)
			return null;

		File f = getFile(cacheDir, url);

		// from SD cache
		Bitmap b = decodeFile(f);
		if (b != null) {
			logger.info("b.getHeight()" + b.getHeight());
			return b;
		}

		// from web
		try {
			Bitmap bitmap = null;
			URL imageUrl = new URL(url);
			HttpURLConnection conn = (HttpURLConnection) imageUrl
					.openConnection();
			conn.setConnectTimeout(30000);
			conn.setReadTimeout(30000);
			conn.setInstanceFollowRedirects(true);
			InputStream is = conn.getInputStream();
			OutputStream os = new FileOutputStream(f);
			Utils.CopyStream(is, os);
			os.close();
			conn.disconnect();
			bitmap = decodeFile(f);
			logger.info("bitmap.getHeight()" + bitmap.getHeight());
			return bitmap;
		} catch (Throwable ex) {

			return null;
		}
	}

	public static byte[] getByteFormBitmap(Bitmap bitmap) {
		ByteArrayOutputStream stream = new ByteArrayOutputStream();
		bitmap.compress(Bitmap.CompressFormat.JPEG, 80, stream);
		byte[] byteArray = stream.toByteArray();
		return byteArray;
	}

	private static File getFile(File cacheDir, String url) {
		// I identify images by hashcode. Not a perfect solution, good for the
		// demo.
		String filename = String.valueOf(url.hashCode());
		// Another possible solution (thanks to grantland)
		// String filename = URLEncoder.encode(url);

		File f = new File(cacheDir, filename);
		return f;

	}

	
	public static Bitmap getResizedBitmap(Context _context, int _size,
			Bitmap _oriImg, int scaleUnit) {
		int width = _oriImg.getWidth();
		int height = _oriImg.getHeight();

		if (width <= _size && height <= _size)
			return _oriImg;

		if (width > height) {
			height = (height * _size) / width;
			width = _size;
		} else {
			width = (width * _size) / height;
			height = _size;
		}

		// if (scaleUnit == MInfoDefine.SCALE_UNIT_DIP) {
		// width = Utils.DPFromPixel(_context, width);
		// height = Utils.DPFromPixel(_context, height);
		// }

		Bitmap mBM = Bitmap.createScaledBitmap(_oriImg, width, height, true);
		return mBM;
	}

	public static Bitmap getResizedBitmap(Context _context, int _sWidth,
			int _sHeight, Bitmap _oriImg) {
		int width = _oriImg.getWidth();
		int height = _oriImg.getHeight();

		Bitmap mBM = Bitmap
				.createScaledBitmap(_oriImg, _sWidth, _sHeight, true);
		return mBM;
	}

	public static Bitmap getResizedBitmap(Context _context, int _sWidth,
			int _sHeight, Bitmap _oriImg, int scaleUnit) {
		int width = _oriImg.getWidth();
		int height = _oriImg.getHeight();

		if (width > height) {
			height = (height * _sWidth) / width;
			width = _sWidth;
		} else {
			width = (width * _sHeight) / height;
			height = _sHeight;
		}
		// if (scaleUnit == MInfoDefine.SCALE_UNIT_DIP) {
		// width = Utils.DPFromPixel(_context, width);
		// height = Utils.DPFromPixel(_context, height);
		// }
		Bitmap mBM = Bitmap.createScaledBitmap(_oriImg, width, height, true);
		return mBM;
	}

	public static Bitmap getRoundBitmap(Context context, Bitmap oriBitmap,
			int roundPx, int roundPy) {
		try {
			int width = oriBitmap.getWidth();
			int height = oriBitmap.getHeight();
			Bitmap output = Bitmap.createBitmap(oriBitmap.getWidth(),
					oriBitmap.getHeight(), Config.ARGB_8888);
			Canvas canvas = new Canvas(output);

			final int color = 0xff424242;
			final Paint paint = new Paint();
			final Rect rect = new Rect(0, 0, oriBitmap.getWidth(),
					oriBitmap.getHeight());
			final RectF rectF = new RectF(rect);

			paint.setAntiAlias(true);
			canvas.drawARGB(0, 0, 0, 0);
			paint.setColor(color);
			canvas.drawRoundRect(rectF, roundPx, roundPy, paint);

			paint.setXfermode(new PorterDuffXfermode(Mode.SRC_IN));
			canvas.drawBitmap(oriBitmap, rect, rect, paint);
			return output;
		} catch (Exception ex) {

			return null;
		}
	}

	public static Bitmap getRoundBitmap(Context context, Bitmap oriBitmap,
			int roundPx, int roundPy, Logger logger) {
		try {
			int width = oriBitmap.getWidth();
			int height = oriBitmap.getHeight();
			Bitmap output = Bitmap.createBitmap(oriBitmap.getWidth(),
					oriBitmap.getHeight(), Config.ARGB_8888);
			Canvas canvas = new Canvas(output);

			final int color = 0xff424242;
			final Paint paint = new Paint();
			final Rect rect = new Rect(0, 0, oriBitmap.getWidth(),
					oriBitmap.getHeight());
			final RectF rectF = new RectF(rect);

			paint.setAntiAlias(true);
			canvas.drawARGB(0, 0, 0, 0);
			paint.setColor(color);
			canvas.drawRoundRect(rectF, roundPx, roundPy, paint);

			paint.setXfermode(new PorterDuffXfermode(Mode.SRC_IN));
			canvas.drawBitmap(oriBitmap, rect, rect, paint);
			return output;
		} catch (Exception ex) {
			logger.error(ex.getMessage(), ex);
			logger.info("getRoundBitmap:" + ex.toString());
			return null;
		}
	}

	public static Bitmap getRoundBitmapBySize(Context context,
			Bitmap oriBitmap, int roundPx, int roundPy, int maxSize) {
		try {
			int _sWidth = 0, _sHeight = 0;
			int width = oriBitmap.getWidth();
			int height = oriBitmap.getHeight();
			_sWidth = width;
			_sHeight = height;
			if (width > height) {
				height = maxSize;
				width = (height * _sWidth) / _sHeight;
			} else {
				width = maxSize;
				height = (width * _sHeight) / _sWidth;
			}
			oriBitmap = Bitmap.createScaledBitmap(oriBitmap, maxSize, maxSize,
					true);
			Bitmap output = Bitmap.createBitmap(maxSize, maxSize,
					Config.ARGB_8888);
			Canvas canvas = new Canvas(output);

			final int color = 0xff424242;
			final Paint paint = new Paint();
			final Rect rect = new Rect(0, 0, maxSize, maxSize);
			final RectF rectF = new RectF(rect);

			paint.setAntiAlias(true);
			canvas.drawARGB(0, 0, 0, 0);
			paint.setColor(color);
			canvas.drawRoundRect(rectF, roundPx, roundPy, paint);
			paint.setXfermode(new PorterDuffXfermode(Mode.SRC_IN));
			canvas.drawBitmap(oriBitmap, rect, rect, paint);
			return output;
		} catch (Exception ex) {

			return null;
		}
	}

	public static Bitmap getRoundBitmapBySize(Logger logger, Context context,
			Bitmap oriBitmap, int roundPx, int roundPy, int maxSize) {
		if (oriBitmap == null)
			return oriBitmap;
		try {
			int _sWidth = 0, _sHeight = 0;
			int width = oriBitmap.getWidth();
			int height = oriBitmap.getHeight();
			_sWidth = width;
			_sHeight = height;
			if (width > height) {
				height = maxSize;
				width = (height * _sWidth) / _sHeight;

			} else {
				width = maxSize;

				height = (width * _sHeight) / _sWidth;

			}
			oriBitmap = Bitmap.createScaledBitmap(oriBitmap, maxSize, maxSize,
					true);

			Bitmap output = Bitmap.createBitmap(maxSize, maxSize,
					Config.ARGB_8888);
			Canvas canvas = new Canvas(output);

			final int color = 0xff424242;
			final Paint paint = new Paint();
			final Rect rect = new Rect(0, 0, maxSize, maxSize);
			final RectF rectF = new RectF(rect);

			paint.setAntiAlias(true);
			canvas.drawARGB(0, 0, 0, 0);
			paint.setColor(color);
			canvas.drawRoundRect(rectF, roundPx, roundPy, paint);

			paint.setXfermode(new PorterDuffXfermode(Mode.SRC_IN));
			canvas.drawBitmap(oriBitmap, rect, rect, paint);
			return output;
		} catch (Exception ex) {
			logger.error(ex.getMessage(), ex);
			logger.info("getRoundBitmap:" + ex.toString());
			return null;
		}
	}

	public static Bitmap getRoundBitmapBySizeByColor(Context context,
			Bitmap oriBitmap, int maxSize) {
		try {
			int _sWidth = 0, _sHeight = 0;
			int width = oriBitmap.getWidth();
			int height = oriBitmap.getHeight();
			_sWidth = width;
			_sHeight = height;
			if (width > height) {
				height = maxSize;
				width = (height * _sWidth) / _sHeight;

			} else {
				width = maxSize;
				height = (width * _sHeight) / _sWidth;

			}
			int roundPx = maxSize / 2;
			int roundPy = maxSize / 2;

			oriBitmap = Bitmap.createScaledBitmap(oriBitmap, width, height,
					true);
			Bitmap output = Bitmap.createBitmap(maxSize + 5, maxSize + 5,
					Config.ARGB_8888);

			Canvas canvas = new Canvas(output);
			final int color = 0xffffffff;
			final Paint paint = new Paint();
			final Rect rect = new Rect(0, 0, maxSize, maxSize);
			final RectF rectF = new RectF(rect);
			paint.setAntiAlias(true);
			canvas.drawARGB(0, 0, 0, 0);
			paint.setColor(color);
			canvas.drawRoundRect(rectF, roundPx, roundPy, paint);
			paint.setXfermode(new PorterDuffXfermode(Mode.SRC_IN));
			canvas.drawBitmap(oriBitmap, rect, rect, paint);

			return output;

		} catch (Exception ex) {

			return null;
		}
	}

	public static String pathLastCamera(Context context) {
		final String[] imageColumns = { MediaStore.Images.Media._ID,
				MediaStore.Images.Media.DATA };
		final String imageOrderBy = MediaStore.Images.Media.DATE_ADDED + " DESC";
		Cursor imageCursor = ((Activity) context).managedQuery(
				MediaStore.Images.Media.EXTERNAL_CONTENT_URI, imageColumns,
				null, null, imageOrderBy);
		imageCursor.moveToFirst();
		do {

			String fullPath = imageCursor.getString(imageCursor
					.getColumnIndex(MediaStore.Images.Media.DATA));
			if (fullPath.contains("DCIM")) {
				// --last image from camera --

				return fullPath;

			}
		} while (imageCursor.moveToNext());
		return "";
	}

	public static void recycleImagesFromView(View view) {
		if (view instanceof ImageView) {
			Drawable drawable = ((ImageView) view).getDrawable();
			if (drawable instanceof BitmapDrawable) {
				BitmapDrawable bitmapDrawable = (BitmapDrawable) drawable;
				bitmapDrawable.getBitmap().recycle();
			}
		}
		if (view instanceof ViewGroup) {
			for (int i = 0; i < ((ViewGroup) view).getChildCount(); i++) {
				recycleImagesFromView(((ViewGroup) view).getChildAt(i));
			}
		}
	}

	// public static Bitmap resolveBitmapOrientation(Bitmap sendBitmap,
	// int OnOrientation) {
	// try {
	// float Degrees = 0f;
	// Matrix matrix = new Matrix();
	// switch (OnOrientation) {
	// case 0:
	// Degrees = -90f;
	// break;
	// case 1:
	// Degrees = 0f;
	// break;
	// case 2:
	// Degrees = 90f;
	// break;
	// case 3:
	// Degrees = 180f;
	// break;
	// }
	// matrix.postRotate(Degrees);
	// // matrix.setRotate(Degrees);
	// sendBitmap = Bitmap
	// .createBitmap(sendBitmap, 0, 0, sendBitmap.getWidth(),
	// sendBitmap.getHeight(), matrix, true);
	// System.out.println("hehe");
	//
	// return sendBitmap;
	// } catch (Exception e) {
	// logger.error(e.getMessage(), e);
	// }
	// return null;
	// }
	public static Bitmap resolveBitmapOrientation(Bitmap sendBitmap,
			int OnOrientation) {
		try {
			float Degrees = 180f;
			Matrix matrix = new Matrix();
			// switch (OnOrientation) {
			// case 0:
			// Degrees = -90f;
			// break;
			// case 1:
			// Degrees = 0f;
			// break;
			// case 2:
			// Degrees = 90f;
			// break;
			// case 3:
			// Degrees = 180f;
			// break;
			// }
			if (230 < OnOrientation && OnOrientation < 300) {

				Degrees = 360f;
			} else if (50 < OnOrientation && OnOrientation < 130) {
				Degrees = 180f;

			} else if (131 < OnOrientation && OnOrientation < 220) {
				Degrees = 270f;

			} else {
				Degrees = 90f;
			}
			matrix.postRotate(Degrees);
			Log.d("ABCNM", "Rotate: " + OnOrientation);
			// matrix.setRotate(Degrees);
			sendBitmap = Bitmap
					.createBitmap(sendBitmap, 0, 0, sendBitmap.getWidth(),
							sendBitmap.getHeight(), matrix, true);

			return sendBitmap;
		} catch (Exception e) {
		}
		return null;
	}

	public static Bitmap resolveBitmapOrientation(Bitmap sendBitmap,
			String fileName) {
		ExifInterface exif;
		try {

			File imageFile = new File(fileName);

			exif = new ExifInterface(imageFile.getAbsolutePath());
			int rotation = exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,
					ExifInterface.ORIENTATION_NORMAL);

			int rotationInDegrees = Utils.exifToDegrees(rotation);

			Matrix matrix = new Matrix();

			if (rotationInDegrees != 0f) {

				matrix.setRotate(rotationInDegrees);
				sendBitmap = Bitmap.createBitmap(sendBitmap, 0, 0,
						sendBitmap.getWidth(), sendBitmap.getHeight(), matrix,
						true);

				return sendBitmap;
			}
			return sendBitmap;
		} catch (Exception e) {
			return null;

		}
	}

	public static Bitmap resolveBitmapOrientation1(Bitmap sendBitmap,
			String fileName, int rotate) {
		// ExifInterface exif;
		try {

			// File imageFile = new File(fileName);
			//
			// exif = new ExifInterface(imageFile.getAbsolutePath());
			// int rotation =
			// exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,
			// ExifInterface.ORIENTATION_NORMAL);

			if (rotate != 0) {
				Matrix matrix = new Matrix();
				matrix.postRotate(rotate);
				Bitmap rotatedImg = Bitmap.createBitmap(sendBitmap, 0, 0,
						sendBitmap.getWidth(), sendBitmap.getHeight(), matrix,
						true);
				sendBitmap.recycle();
				return rotatedImg;
			}
			return sendBitmap;
		} catch (Exception e) {
			return null;

		}
	}

	public static int getRotation(Context context, Uri selectedImage) {
		int rotation = 0;
		ContentResolver content = context.getContentResolver();

		Cursor mediaCursor = content.query(selectedImage, new String[] {
				"orientation", "date_added" }, null, null, "date_added desc");

		if (mediaCursor != null && mediaCursor.getCount() != 0) {
			while (mediaCursor.moveToNext()) {
				rotation = mediaCursor.getInt(0);
				break;
			}
		}
		mediaCursor.close();
		return rotation;
	}

	public static Bitmap setMediaBitmap(Context _context, Bitmap _bitmap,
			int _maxSize, int scaleUnit) {
		return Utils_Image.getResizedBitmap(_context, _maxSize, _bitmap,
				scaleUnit);
	}

	// public static void showAvatar(Logger logger, String avatarId,
	// ImageView ivAvatar, Context context) {
	// Bitmap bitmap = ContextComont.getImageLoader().get(avatarId);
	// if (avatarId.length() == 0 || avatarId.equals("0") || bitmap == null) {
	//
	// ivAvatar.setImageBitmap(Utils_Image.getRoundBitmapBySize(logger,
	// context,
	// Utils_Image.getBitmapResource(context, "ava_default"),
	// ContextComont.roundAvatar, ContextComont.roundAvatar,
	// (int) (1.2 * ContextComont.widthAvatar)));
	//
	// } else {
	// if (bitmap != null) {
	// ivAvatar.setImageBitmap(Utils_Image.getRoundBitmapBySize(
	// logger, context, bitmap, ContextComont.roundAvatar,
	// ContextComont.roundAvatar,
	// (int) (1.2 * ContextComont.widthAvatar)));
	//
	// }
	// // else {
	// // Utils.updateAvatar(avatarId, ivAvatar, 1,
	// // 2 * ContextComont.widthAvatar);
	// // }
	// }
	// }
	//
	// public static void showAvatar(String avatarId, ImageView ivAvatar,
	// Context context) {
	// Bitmap bitmap = ContextComont.getImageLoader().get(avatarId);
	// if (avatarId.length() == 0 || avatarId.equals("0")) {
	// ivAvatar.setImageBitmap(Utils_Image.getRoundBitmapBySizeByColor(
	// context,
	// Utils_Image.getBitmapResource(context, "ava_default"),
	// 2 * ContextComont.widthAvatar));
	// } else {
	// if (bitmap != null) {
	// ivAvatar.setImageBitmap(Utils_Image
	// .getRoundBitmapBySizeByColor(context, bitmap,
	// 2 * ContextComont.widthAvatar));
	// } else {
	// Utils.updateAvatar(avatarId, ivAvatar, 1,
	// ContextComont.widthAvatar);
	// }
	// }
	// }

}