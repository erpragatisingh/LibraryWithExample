package com.vnpay.vntalk.util;

import java.util.Calendar;
import java.util.Date;
import java.util.TimeZone;
import java.util.Vector;

import org.apache.log4j.Logger;

import android.graphics.Bitmap;
import android.graphics.Canvas;

public class UtilsMe {

	public static int byteToInt(byte[] paramArrayOfByte) {
		int i = 0;
		int[] arrayOfInt = new int[4];
		arrayOfInt[0] = -16777216;
		arrayOfInt[1] = 16711680;
		arrayOfInt[2] = 65280;
		arrayOfInt[3] = 255;
		for (int j = 0;; j++) {
			if (j >= 4)
				return i;
			i |= paramArrayOfByte[j] << 8 * (3 - j) & arrayOfInt[j];
		}
	}

	public static int byteToInt(byte[] paramArrayOfByte, int paramInt) {
		int i = 0;
		int[] arrayOfInt = new int[4];
		arrayOfInt[0] = -16777216;
		arrayOfInt[1] = 16711680;
		arrayOfInt[2] = 65280;
		arrayOfInt[3] = 255;
		for (int j = 0;; j++) {
			if (j >= 4)
				return i;
			i |= paramArrayOfByte[(j + paramInt)] << 8 * (3 - j)
					& arrayOfInt[j];
		}
	}

	public static int checkPasswordLBP(String pass) {
		if (pass.length() < 6) {
			return -6;
		}
		if (pass.length() > 20) {
			return -20;
		}
		char[] b = pass.toCharArray();
		boolean isNumber = false;
		boolean isChar = false;
		for (int i = 0; i < b.length; i++) {

			int value = (int) b[i];
			if (49 <= value && value <= 57) {
				isNumber = true;
			}
			if (65 <= value && value <= 122) {
				isChar = true;
			}

			if (isNumber && isChar) {
				return 1;
			}
		}
		return -1;
	}

	public static int checkPassword(String pass) {
		int check = 0;
		if (pass.length() < 6) {
			check = -6;
		}
		if (pass.length() > 20) {
			check = -20;
		}
		// char[] b = pass.toCharArray();
		// boolean isNumber = false;
		// boolean isChar = false;
		// for (int i = 0; i < b.length; i++) {
		//
		// int value = (int) b[i];
		// if (49 <= value && value <= 57) {
		// isNumber = true;
		// }
		// if (65 <= value && value <= 122) {
		// isChar = true;
		// }
		//
		// if (isNumber && isChar) {
		// return 1;
		// }
		//
		// }
		return check;
	}

	public static String checkPhone(Logger logger, String phone) {
		if (phone.length() == 0)
			return "";

		try {
			if (phone.startsWith("+")) {

				long tem = Long.parseLong(phone.substring(1));
				char[] b = phone.toCharArray();

				if (phone.length() < 12 || phone.length() > 13) {
					return "";
				}

				if (b[1] == '8' && b[2] == '4') {
					if (b[3] == '1' && phone.length() == 13) {
						return phone;
					} else if (b[3] == '9' && phone.length() == 12) {
						return phone;
					} else {
						return "";
					}
				} else {
					return "";
				}
			} else {
				long tem = Long.parseLong(phone);
				char[] b = phone.toCharArray();

				if (phone.length() < 10 || phone.length() > 11) {
					return "";
				}
				if (b[0] == '8') {
					if (b[1] == '4') {
						if (b[2] == '1' && phone.length() == 12) {

							return "+" + phone;
						} else if (b[2] == '9' && phone.length() == 11) {

							return "+" + phone;

						} else {
							return "";
						}
					} else {
						return "";
					}

				} else if (b[0] == '0') {

					if (b[1] == '1' && phone.length() == 11) {

						return "+84" + phone.substring(1);
					} else if (b[1] == '9' && phone.length() == 10) {

						return "+84" + phone.substring(1);

					} else {
						return "";
					}
				}
			}
		} catch (Exception e) {

			return "";
		}
		return "";
	}

	public static String standardizedPhone(String phone) {
		if (phone.length() == 0)
			return "";
		// replate ky tu dac biet;
		phone = phone.replaceAll("[^a-zA-Z0-9]", "");
		try {
			if (phone.startsWith("+")) {

				long tem = Long.parseLong(phone.substring(1));
				char[] b = phone.toCharArray();
				if (b[1] == '8' && b[2] == '4') {
					return phone;
				} else {
					return "+84" + phone.substring(1);
				}
			} else {
				long tem = Long.parseLong(phone);
				char[] b = phone.toCharArray();

				if (b[0] == '0') {
					return "+84" + phone.substring(1);
				} else {
					if (b[0] == '8' && b[1] == '4') {
						return "+" + phone;
					} else {
						return "+84" + phone.substring(1);
					}
				}
			}

		} catch (Exception e) {

			return "";
		}
	}

	public static byte[] concat(byte[] A, byte[] B) {
		byte[] C = new byte[A.length + B.length];
		System.arraycopy(A, 0, C, 0, A.length);
		System.arraycopy(B, 0, C, A.length, B.length);
		return C;
	}

	public static int[] createGradient(int start, int end, int length) {
		if (length <= 2) {
			throw new IllegalArgumentException(
					"Length of the gradient must be greater than two.");
		}

		int[] result = new int[length];

		int startAlpha = start >>> 24;
		int startRed = (start >>> 16) & 0x00FF;
		int startGreen = (start >>> 8) & 0x0000FF;
		int startBlue = start & 0x00000FF;

		int endAlpha = end >>> 24;
		int endRed = (end >>> 16) & 0x00FF;
		int endGreen = (end >>> 8) & 0x0000FF;
		int endBlue = end & 0x00000FF;

		// the first color is the start
		result[0] = start;
		// number of colors until the end:
		int count = length - 1;

		int stepAlpha = ((endAlpha - startAlpha) << 8) / count;
		int stepRed = ((endRed - startRed) << 8) / count;
		int stepGreen = ((endGreen - startGreen) << 8) / count;
		int stepBlue = ((endBlue - startBlue) << 8) / count;

		startAlpha <<= 8;
		startRed <<= 8;
		startGreen <<= 8;
		startBlue <<= 8;

		for (int i = 0; i < count; i++) {
			startAlpha += stepAlpha;
			startRed += stepRed;
			startGreen += stepGreen;
			startBlue += stepBlue;

			result[i + 1] = ((startAlpha << 16) & 0xFF000000)
					| ((startRed << 8) & 0x00FF0000)
					| (startGreen & 0x0000FF00) | (startBlue >>> 8);
		}
		return result;
	}

	public static void drawBitmap(Canvas paramCanvas, Bitmap paramBitmap,
			int Left, int Top, int Align) {
		int i = Left;
		int k = Top;
		if ((Align & 1) == 1) {
			i -= paramBitmap.getWidth() >> 1;
		} else if ((Align & 8) == 8)
			i -= paramBitmap.getWidth();

		if ((Align & 2) == 2)
			k -= (paramBitmap.getHeight() >> 1);
		else if ((Align & 20) == 32)
			k -= paramBitmap.getHeight();
		paramCanvas.drawBitmap(paramBitmap, i, k, null);
	}

	public static void drawImagePartX(Canvas paramCanvas, int PositionX,
			int PositionY, int Align, Bitmap paramBitmap, int paramInt4,
			int paramInt5) {
		int i = paramBitmap.getWidth();
		int j = paramBitmap.getHeight();
		int k = i / paramInt5;
		paramCanvas.save();
		if ((Align & 0x1) > 0)
			PositionX -= (k >> 1);

		if ((Align & 0x2) > 0)
			PositionY -= (j >> 1);
		else if ((Align & 0x20) > 0)
			PositionY -= j;
		paramCanvas
				.clipRect(PositionX, PositionY, PositionX + k, PositionY + j);
		paramCanvas.drawBitmap(paramBitmap, PositionX - paramInt4 * k,
				PositionY, null);
		paramCanvas.restore();
	}

	public static void drawImagePartY(Canvas paramCanvas, int paramInt1,
			int paramInt2, int paramInt3, Bitmap paramBitmap, int paramInt4,
			int paramInt5) {
		int i = paramBitmap.getWidth();
		int j = paramBitmap.getHeight() / paramInt5;
		paramCanvas.save();
		if ((paramInt3 & 0x1) > 0)
			paramInt1 -= (i >> 1);
		else if ((paramInt3 & 0x8) > 0)
			paramInt1 -= i;

		if ((paramInt3 & 0x2) > 0)
			paramInt2 -= (j >> 1);
		paramCanvas
				.clipRect(paramInt1, paramInt2, paramInt1 + i, paramInt2 + j);
		paramCanvas.drawBitmap(paramBitmap, paramInt1, paramInt2 - paramInt4
				* j, null);
		paramCanvas.restore();
	}

	public static void drawImagePerX(Canvas paramCanvas, int paramInt1,
			int paramInt2, Bitmap paramBitmap, int paramInt3) {
		int i = paramBitmap.getWidth();
		int j = paramBitmap.getHeight();
		int k = 0;
		while (true) {
			if (k >= paramInt3)
				return;
			paramCanvas.save();
			paramCanvas.clipRect(paramInt1 + k, paramInt2, paramInt1
					+ paramInt3, paramInt2 + j);
			paramCanvas.drawBitmap(paramBitmap, paramInt1 + k, paramInt2, null);
			paramCanvas.restore();
			k += i;
		}
	}

	public static void drawImagePerX(Canvas paramCanvas, int PositionX,
			int PositionY, Bitmap paramBitmap, int width, int paramInt4,
			int paramInt5) {
		int i = paramBitmap.getWidth();
		int j = paramBitmap.getHeight();
		paramCanvas.save();
		paramCanvas.clipRect(PositionX, PositionY, PositionX + paramInt4,
				PositionY + j);
		paramCanvas.drawBitmap(paramBitmap, PositionX, PositionY, null);
		paramCanvas.restore();
		paramCanvas.save();
		paramCanvas.clipRect(PositionX + width - paramInt5, PositionY,
				PositionX + width, PositionY + j);
		paramCanvas.drawBitmap(paramBitmap, PositionX + width - i, PositionY,
				null);
		paramCanvas.restore();
		int k = paramInt4;
		int m = i - paramInt4 - paramInt5;
		while (true) {
			if (k >= width - paramInt5)
				return;
			paramCanvas.save();
			paramCanvas.clipRect(PositionX + k, PositionY, PositionX + width
					- paramInt5, PositionY + j);
			paramCanvas.drawBitmap(paramBitmap, PositionX + k - paramInt4,
					PositionY, null);
			paramCanvas.restore();
			k += m;
		}
	}

	public static void drawImagePerY(Canvas paramCanvas, int paramInt1,
			int paramInt2, Bitmap paramBitmap, int paramInt3, int paramInt4,
			int paramInt5) {
		int i = paramBitmap.getWidth();
		int j = paramBitmap.getHeight();
		paramCanvas.save();
		paramCanvas.clipRect(paramInt1, paramInt2, paramInt1 + i, paramInt2
				+ paramInt4);
		paramCanvas.drawBitmap(paramBitmap, paramInt1, paramInt2, null);
		paramCanvas.restore();
		paramCanvas.save();
		paramCanvas.clipRect(paramInt1, paramInt2 + paramInt3 - paramInt5,
				paramInt1 + i, paramInt2 + paramInt3);
		paramCanvas.drawBitmap(paramBitmap, paramInt1, paramInt2 + paramInt3
				- j, null);
		paramCanvas.restore();
		int k = paramInt4;
		int m = j - paramInt4 - paramInt5;
		while (true) {
			if (k >= paramInt3 - paramInt5)
				return;
			paramCanvas.save();
			paramCanvas.clipRect(paramInt1, paramInt2 + k, paramInt1 + i,
					paramInt2 + paramInt3 - paramInt5);
			paramCanvas.drawBitmap(paramBitmap, paramInt1, paramInt2 + k
					- paramInt4, null);
			paramCanvas.restore();
			k += m;
		}
	}

	public final static void fillRectWidthGradientDx(Canvas paramCanvas, int x,
			int y, int w, int h, int[] gradient, boolean tang) {
		// for (int i = 0; i < h; i++) {
		// paramCanvas.setColor(gradient[i]);
		// if (tang) {
		// paramCanvas.f(x - i, y + i, w + 2 * i, 1);
		// } else {
		// paramCanvas.fillRect(x + i, y + i, w - 2 * i, 1);
		// }
		// }
	}

	public static String getDate(long time) {
		Date myDate = new Date(time);
		Calendar calendar = Calendar.getInstance();
		calendar.setTimeZone(TimeZone.getTimeZone("GMT+7"));
		calendar.setTime(myDate);
		int year = calendar.get(Calendar.YEAR);
		int month = calendar.get(Calendar.MONTH);
		int day = calendar.get(Calendar.DAY_OF_MONTH);
		int hour = calendar.get(Calendar.HOUR_OF_DAY);
		int minute = calendar.get(Calendar.MINUTE);
		int second = calendar.get(Calendar.SECOND);

		calendar.setTime(new Date(System.currentTimeMillis()));
		int year1 = calendar.get(Calendar.YEAR);
		int month1 = calendar.get(Calendar.MONTH);
		int day1 = calendar.get(Calendar.DAY_OF_MONTH);
		int hour1 = calendar.get(Calendar.HOUR_OF_DAY);
		int minute1 = calendar.get(Calendar.MINUTE);
		int second1 = calendar.get(Calendar.SECOND);

		if (year1 > year) {
			return new String(day + "/" + month + "/" + year);
		} else {
			if (month1 > month) {
				return new String(day + "/" + month + "/" + year);
			} else {
				if (day1 > day) {
					return new String((day1 - day) + " ngày trước");
				} else {
					if (hour1 > hour) {
						int phut = minute1 - minute;
						if (phut > 0) {
							return new String((hour1 - hour) + " giờ trước");
						} else {
							return new String((hour1 - hour - 1) + " giờ trước");
						}
					} else {
						if (minute1 > minute) {
							int giay = second1 - second;
							if (giay > 0) {
								return new String((minute1 - minute)
										+ " phút trước");
							} else {
								return new String((minute1 - minute - 1)
										+ " phút trước");
							}
						} else {
							return new String("Vài giây trước");
						}
					}
				}
			}
		}
	}

	public static String getDisplayAmount(long paramInt, char paramChar) {
		StringBuffer localStringBuffer = new StringBuffer(
				String.valueOf(paramInt));
		for (int i = localStringBuffer.length() - 3;; i -= 3) {
			if (i <= 0)
				return localStringBuffer.toString();
			localStringBuffer.insert(i, paramChar);
		}
	}

	public final static String getTime(long milliseconds) {
		Date date = new Date(milliseconds);
		Calendar tt = Calendar.getInstance();
		tt.setTimeZone(TimeZone.getTimeZone("GMT+7"));
		tt.setTime(date);
		String hour = "" + tt.get(Calendar.HOUR);
		if (hour.length() == 1) {
			hour = " " + hour;
		}
		String Minute = "" + tt.get(Calendar.MINUTE);
		if (Minute.length() == 1) {
			Minute = "0" + Minute;
		}
		return hour + ":" + Minute + ""
				+ ((tt.get(Calendar.AM_PM) == 0) ? "AM" : "PM");
	}

	public static String hashCodeStr(short paramShort, String paramString) {
		String str = "";
		for (int i = 0;; i++) {
			if (i >= paramString.length())
				return str;
			str = str
					+ (char) (0x1D ^ (paramShort ^ (short) paramString
							.charAt(i)));
		}
	}

	// public static boolean isValidAccountName(String paramString) {
	// int i = paramString.length();
	// boolean j = false;
	// if ((i < 9) || (i > 13))
	// j = false;
	// else {
	// for (int k = 0;; k++) {
	// if (k >= i) {
	// break;
	// } else {
	// int m = paramString.charAt(k);
	// if (((m >= '0') && (m <= '9')))
	// j = true;
	// else {
	// j = false;
	// }
	// }
	// }
	// }
	// return j;
	// }

	public static boolean isNumber(String phone) {
		try {
			Long.parseLong(phone);
			return true;
		} catch (Exception ex) {
			return false;
		}
	}

	public static boolean isPhoneNumber(String paramString) {
		boolean i;
		if ((paramString == null) || (paramString.length() < 10)
				|| (paramString.length() > 12))
			i = false;
		else {
			for (int j = 0;; j++) {
				if (j < paramString.length()) {
					int k = paramString.charAt(j);
					if ((k <= '9') && (k >= '0')) {
						i = false;
						break;
					}
				}
			}
			if ((!paramString.startsWith("0", 0))
					|| (!paramString.startsWith("84", 0)))
				i = false;
			else if ((paramString.startsWith("09", 0))
					&& (paramString.length() > 10)) {
				i = false;
			} else if ((paramString.startsWith("849", 0))
					&& (paramString.length() > 11)) {
				i = false;
			} else if ((paramString.startsWith("01", 0))
					&& (paramString.length() > 11)) {
				i = false;
			} else if ((paramString.startsWith("841", 0))
					&& (paramString.length() > 12)) {
				i = false;
			} else
				i = true;
		}
		return i;
	}

	/**
	 * @param PositionX
	 *            : Mouse click X
	 * @param PositionY
	 *            : Mouse click Y
	 * @param localControlX
	 *            : Control X
	 * @param localControlY
	 *            : Control Y
	 * @param localControlWidth
	 *            : ControlWidth
	 * @param localControlHeight
	 *            : ControlHeight
	 * @return WithIn(true) or WithOut(Fail)
	 */
	public static boolean isPointInRect(int PositionX, int PositionY,
			int localControlX, int localControlY, int localControlWidth,
			int localControlHeight) {
		boolean i = false;
		if (PositionX >= localControlX) {
			if (PositionX <= localControlX + localControlWidth)
				if (PositionY >= localControlY)
					if (PositionY <= localControlY + localControlHeight)
						i = true;
		} else
			i = false;
		return i;
	}

	public static boolean isValidAge(String paramString) {
		boolean j;
		if (paramString.length() == 0)
			j = true;
		else {
			int i = 0;
			try {
				int k = Integer.parseInt(paramString);
				i = k;
				if ((i < 0) || (i > 99)) {
					j = false;
				} else
					j = true;
			} catch (Exception localException) {
				localException.printStackTrace();
				j = false;
			}
		}
		return j;

	}

	public static boolean isValidDate(String paramString1, String paramString2,
			String paramString3) {
		boolean j;
		if ((paramString1.length() == 0) && (paramString2.length() == 0)
				&& (paramString3.length() == 0))
			j = true;
		else {
			j = true;
			try {
				int i2 = Integer.parseInt(paramString1);
				if ((i2 < 1) || (i2 > 31)) {
					j = false;
				}
			} catch (Exception localException2) {
				localException2.printStackTrace();
				j = false;
			}
			try {
				int i1 = Integer.parseInt(paramString2);
				if ((i1 < 1) || (i1 > 12)) {
					j = false;
				}
			} catch (Exception localException2) {
				j = false;
			}
			try {
				while (true) {
					int n = Integer.parseInt(paramString3);
					if ((n < 0) || (n > 99)) {
						j = false;
					}
				}
			} catch (Exception localException3) {
				j = false;
			}
		}
		return j;
	}

	public static Date parseDate(String dateString) {
		Date date = new Date(0);
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		if (dateString == null || dateString.equals("")
				|| dateString.equals("//")) {
			return null;
		}
		int strSize = dateString.length();
		if (strSize < 8 || strSize > 10) {
			return null;
		}
		String[] value = stringSplit(dateString, "/");
		if (value.length != 3) {
			return null;
		}
		String yearStr = value[2];
		String monthStr = value[1];
		String dayStr = value[0];
		int year = 0;
		int day = 0;
		int month = 0;
		try {
			year = Integer.parseInt(yearStr);
			if (year > 2030 || year < 1940) {
				return null;
			}
		} catch (Exception e) {
			return null;
		}
		try {
			day = Integer.parseInt(dayStr);
			if (day > 31) {
				return null;
			}
		} catch (Exception e) {
			return null;
		}
		try {
			month = Integer.parseInt(monthStr) - 1; // Zero Based Months
			if (month > 11) {
				return null;
			}
		} catch (Exception e) {
			return null;
		}
		cal.set(Calendar.MONTH, month);
		cal.set(Calendar.DATE, day);
		cal.set(Calendar.YEAR, year);
		date = cal.getTime();
		return date;
	}

	public static String[] stringSplit(String splitStr, String delimiter) {
		if (splitStr.length() == 0) {
			return new String[0];
		}
		StringBuffer token = new StringBuffer();
		Vector tokens = new Vector();
		// split
		char[] chars = splitStr.toCharArray();
		for (int i = 0; i < chars.length; i++) {
			if (delimiter.indexOf(chars[i]) != -1) {
				tokens.addElement(token.toString());
				token.setLength(0);
			} else {
				token.append(chars[i]);
			}
		}
		tokens.addElement(token.toString());
		// convert the vector into an array
		String[] splitArray = new String[tokens.size()];
		for (int i = 0; i < splitArray.length; i++) {
			splitArray[i] = (String) tokens.elementAt(i);
		}
		return splitArray;
	}

	public static byte[] toByte(int paramInt) {
		byte[] arrayOfByte = new byte[4];
		for (int i = 0;; i++) {
			if (i >= 4)
				return arrayOfByte;
			arrayOfByte[i] = (byte) (0xFF & paramInt >> 8 * (3 - i));
		}
	}
}
